var documenterSearchIndex = {"docs":
[{"location":"","page":"Documentation","title":"Documentation","text":"CurrentModule = Flou","category":"page"},{"location":"#Documentation","page":"Documentation","title":"Documentation","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"","category":"page"},{"location":"#Motivation","page":"Documentation","title":"Motivation","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Flou is a solver for hyperbolic partial differential equations, using a Discontinuous Galerkin Spectral Element Method (DGSEM) approach.","category":"page"},{"location":"#Roadmap","page":"Documentation","title":"Roadmap","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Add RBF quadratures\nAdd elliptic equations\nAdd hyperboli-elliptic equations\nAdd unstructured mesh reader","category":"page"},{"location":"#Hyperbolic-equations","page":"Documentation","title":"Hyperbolic equations","text":"","category":"section"},{"location":"#Mathematical-background","page":"Documentation","title":"Mathematical background","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Weak form in 2D for tensor-product elements:","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"M dotboldsymbolQ_ij = sum_k^N_x K^(j)_xik tildeboldsymbolf_kj + sum_k^N_y K^(i)_yjk tildeboldsymbolg_ik - sum_d^2 L_omega_xij^(d) boldsymbolf_ni^star - sum_d^2 L_omega_yij^(d) boldsymbolg_nj^star","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Strong form in 2D for tensor-product elements:","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"M dotboldsymbolQ_ij = sum_k^N_x hatK^(j)_xik tildeboldsymbolf_kj + sum_k^N_y hatK^(i)_yjk tildeboldsymbolg_ik - sum_d^2 L_omega_xj^(d) boldsymbolf_ni^star - sum_d^2 L_omega_yij^(d) boldsymbolg_nj^star","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"The matrices are defined as follows:","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"begingathered\nM = textdiag(J_ijomega_xiomega_yj) \nK^(j)_xik = omega_yjomega_xkD_xki \nK^(i)_yjk = omega_xiomega_ykD_ykj \nhatK^(j)_xik = -omega_yjomega_xiD_xik + omega_yjleftl_xi(1)l_xk(1) - l_xi(-1)l_xk(-1)right \nhatK^(i)_yjk = -omega_xiomega_yjD_yjk + omega_xileftl_yj(1)l_yk(1) - l_yj(-1)l_yk(-1)right \nL_omega_xij^(1) = omega_yjl_xi(-1) \nL_omega_xij^(2) = omega_yjl_xi(1) \nL_omega_yij^(1) = omega_xil_yj(-1) \nL_omega_yij^(2) = omega_xil_yj(1)\nendgathered","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"note: Note\nNotice that the operators in 2D are very similar to the ones in 1D. They are simply the tensor product of their 1D versions with the vector vecomega corresponding to the other direction. For example, K^text2D_x = K^text1D_x otimes omega_y, which is a third order tensor with size N_x times N_x times N_y.","category":"page"},{"location":"#Divergence-operators","page":"Documentation","title":"Divergence operators","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Modules = [Flou]\nPages = [\"Divergence.jl\"]","category":"page"},{"location":"#Flou.SSFVDivOperator","page":"Documentation","title":"Flou.SSFVDivOperator","text":"SSFVDivOperator(twopointflux, fvflux, blending)\n\nSplit-divergence operator in telescopic form. Only implemented for tensor-product elements.\n\nThe telescopic operator approach effectively turns the initial split formulation into a sub-element finite volume scheme. The twopointflux and fvflux are both combined into an entropy-stable interface flux that controls the volume dissipation through the subcell interface Riemann solver.\n\n\n\n\n\n","category":"type"},{"location":"#Flou.SplitDivOperator","page":"Documentation","title":"Flou.SplitDivOperator","text":"SplitDivOperator(twopointflux)\n\nSplit-divergence operator, only implemented for tensor-product elements. The two-point flux represents the splitting strategy.\n\n\n\n\n\n","category":"type"},{"location":"#Developers","page":"Documentation","title":"Developers","text":"","category":"section"},{"location":"#Standard-regions-–-StdRegions.jl","page":"Documentation","title":"Standard regions – StdRegions.jl","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Any standard region extending the AbstractStdRegion struct must implement the is_tensor_product trait. The idea behind is to use the tensor product structure of the nodes to employ a faster approach.","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"is_tensor_product","category":"page"},{"location":"#Flou.is_tensor_product","page":"Documentation","title":"Flou.is_tensor_product","text":"is_tensor_product(std)\n\nReturn true if std is a tensor-product standard region, and false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"#Index","page":"Documentation","title":"Index","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"","category":"page"}]
}
